struct tnode {
    var info;
    var color;
    var left;
    var right;
}

def makeNode(var t, var i) {
    t := bless tnode; 
    t[info] := i;
    t[color] := true; 
    t[left] := nil;
    t[right] := nil;
    return t;
}

def isRed(var tree) {
    if (tree == nil) {
        return false;
    } else {
        return tree[color];
    }
}

def rotL(var tree) {
    let x := tree[right];
    tree[right] := x[left];
    x[left] := tree;
    x[color] := tree[color];
    tree[color] := 1;
    return x;
}

def rotR(var tree) {
    let x := tree[left];
    tree[left] := x[right];
    x[right] := tree;
    x[color] := tree[color];
    tree[color] := 1;
    return x;
}

def colorFlip(var tree) {
    tree[color] := 1;
    var t := tree[left];
    t[color] := 0;
    t := tree[right];
    t[color] := 0;
    return tree;
}

def makeRedChildLean(var tree) {
    if (isRed(tree[left]) && isRed(tree[left][right])) {
        tree[left] := rotL(tree[left]);
    }
    if (isRed(tree[right]) && isRed(tree[right][left])) {
        tree[right] := rotR(tree[right]);
    }
    return tree;
}


def makeRedSibling(var tree) {
    if (isRed(tree[left]) && isRed(tree[left][left])) {
        tree := rotR(tree);
    }
    if (isRed(tree[right]) && isRed(tree[right][right])) {
        tree := rotL(tree);
    }
    return tree;
}

def pushRedUp(var tree) {
    if (isRed(tree[left]) && isRed(tree[right])) {
        println "color flip";
        tree := colorFlip(tree);
    }
    return tree;
}

def balance(var tree) {
    tree := pushRedUp(tree);
    tree := makeRedChildLean(tree);
    tree := makeRedSibling(tree);
    return tree;
}


def insert(var tree, var v) {
    if (tree == nil) {
        println "base case, creating node for " + v;
        return makeNode(tree, v);
    }
    print v + " < " + tree[info] + "? ";
    if (v < tree[info]) {
        println "go left";
        tree[left] := insert(tree[left], v);
    } else {
        println "go right";
        tree[right] := insert(tree[right], v);
    }
    return balance(tree);
}

def visit(var tree) {
    if (tree != nil) {
        print tree[info] + " ";
        visit(tree[left]);
        visit(tree[right]);
    }
}

def bfs(var tree) {
    let fq := [ tree ];
    let nc := 1;
    let t := tree;
    while (length(fq) > 0) {
        nc := length(fq);
        while (nc > 0) {
            t := fq[0]; 
            pop(fq);
            nc := nc - 1;
            if (t != nil) {
                print t[info];
                if (isRed(t)) {
                    print "R";
                }
                print " ";
                append(fq, t[left]);
                append(fq, t[right]);
            }
        }
        println " ";
    }
}

def isValid23(var tree, var bh) {
    if (tree == nil) {
        return bh == 0;
    }
    if (!isRed(tree)) {
        bh--;
    }
    if (isRed(tree) && (isRed(tree[left]) || isRed(tree[right]))) {
            println "double red violation";
            return false;
    }
    if (isRed(tree[left]) && isRed(tree[right])) {
            println "red sibling violation";
            return false;
    }
    return isValid23(tree[left], bh) && isValid23(tree[right], bh);
}

def validate(var tree) {
    var bh := 0;
    var x := tree;
    while (x != nil) {
        if (!isRed(x)) {
            bh++;
        }
        x := x[left];
    }
    return isValid23(tree, bh);
}

def main() {
    let vals := ["a", "s", "e", "a", "r", "c", "h", "i", "n", "g", "e", "x", "a", "m", "p", "l", "e"];
    let root := nil;
    let i := 0;
    while (i < length(vals)) {
        println "inserting " + vals[i];
        root := insert(root, vals[i]);
        root[color] := 0;
        i++;
    }
    visit(root);
    println " ";
    if (validate(root)) {
        println "black and red balanced.";
    }
    bfs(root);
}