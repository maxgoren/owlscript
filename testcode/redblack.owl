struct tnode {
    var info;
    var color;
    var left;
    var right;
}

def makeNode(var t, var i) {
    t := bless tnode; 
    t[info] := i;
    t[color] := true; 
    return t;
}

def isRed(var tree) {
    if (tree == nil) {
        return false;
    } else {
        return tree[color];
    }
}

def rotL(var tree) {
    let x := tree[right];
    tree[right] := x[left];
    x[left] := tree;
    x[color] := tree[color];
    tree[color] := 1;
    return x;
}

def rotR(var tree) {
    let x := tree[left];
    tree[left] := x[right];
    x[right] := tree;
    x[color] := tree[color];
    tree[color] := 1;
    return x;
}

def colorFlip(var tree) {
    tree[color] := 1;
    var t := tree[left];
    t[color] := 0;
    t := tree[right];
    t[color] := 0;
    return tree;
}

def balance(var tree) {
    let t := tree[left];
    if (isRed(tree[right]) == true) {
        println "single red";
        tree := rotL(tree);
        t := tree[left];
    } else {
        ;
    }
    if (isRed(tree[left]) && isRed(t[left])) {
        println "double red";
        tree := rotR(tree);
    } else {
        ;
    }
    if (isRed(tree[left]) && isRed(tree[right])) {
        println "color flip";
        tree := colorFlip(tree);
    } else { 
        ; 
    }
    return tree;
}

def insert(var tree, var v) {
    if (tree == nil) {
        tree := makeNode(tree, v);
        println "base case, creating node for " + v;
    } else {
        println v + " < " + tree[info] + "?";
        if (v < tree[info]) {
            println "go left";
            tree[left] := insert(tree[left], v);
        } else {
            println "go right";
            tree[right] := insert(tree[right], v);
        }
    }
    tree := balance(tree);
    return tree;
}

def visit(var tree) {
    if (tree != nil) {
        print tree[info] + " ";
        visit(tree[left]);
        visit(tree[right]);
    } else {
        ;
    }
}

def main() {
    let vals := ["a", "s", "e", "a", "r", "c", "h", "i", "n", "g", "e", "x", "a", "m", "p", "l", "e"];
    let root := nil;
    let i := 0;
    while (i < length(vals)) {
        println "inserting " + vals[i];
        root := insert(root, vals[i]);
        root[color] := 0;
        i := i + 1;
    }
    visit(root);
    println " ";
}